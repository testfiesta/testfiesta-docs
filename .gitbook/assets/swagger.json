{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"TemplateQueryParams": {
				"properties": {
					"limit": {
						"type": "number",
						"format": "double"
					},
					"offset": {
						"type": "number",
						"format": "double"
					},
					"q": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"createdByIds": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"creationStartDate": {
						"type": "string"
					},
					"creationEndDate": {
						"type": "string"
					}
				},
				"required": [
					"limit",
					"offset"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CustomFieldDataType": {
				"type": "string",
				"enum": [
					"text",
					"radio",
					"date",
					"step",
					"attachment",
					"link",
					"checkbox",
					"dropdown",
					"none"
				]
			},
			"TemplateField": {
				"description": "Represents a single custom field within a template.",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string",
						"description": "The name of the custom template field."
					},
					"dataType": {
						"$ref": "#/components/schemas/CustomFieldDataType",
						"description": "The data type of the custom template field."
					},
					"defaultValue": {
						"type": "string",
						"description": "The default value of the custom template field."
					},
					"value": {
						"type": "string",
						"description": "The value of the custom template field."
					},
					"options": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"name",
					"dataType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateTemplateDto": {
				"description": "Data Transfer Object for creating a new template.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the template."
					},
					"templateFields": {
						"items": {
							"$ref": "#/components/schemas/TemplateField"
						},
						"type": "array"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateTemplateDto": {
				"description": "Data Transfer Object for updating an existing template.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the template."
					},
					"templateFields": {
						"items": {
							"$ref": "#/components/schemas/TemplateField"
						},
						"type": "array"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"TagQueryParams": {
				"properties": {
					"limit": {
						"type": "number",
						"format": "double"
					},
					"offset": {
						"type": "number",
						"format": "double"
					},
					"q": {
						"type": "string"
					},
					"entityType": {
						"type": "string"
					}
				},
				"required": [
					"limit",
					"offset"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EntityType": {
				"type": "string",
				"enum": [
					"cases",
					"milestones",
					"executions",
					"results",
					"runs",
					"plans",
					"defects"
				]
			},
			"CreateTagDto": {
				"description": "Data Transfer Object for creating a new tag.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the tag."
					},
					"description": {
						"type": "string",
						"description": "The description of the tag."
					},
					"entityTypes": {
						"items": {
							"$ref": "#/components/schemas/EntityType"
						},
						"type": "array",
						"description": "The entity types of the tag."
					}
				},
				"required": [
					"name",
					"entityTypes"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateTagDto": {
				"description": "Data Transfer Object for updating an existing tag.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the tag."
					},
					"description": {
						"type": "string",
						"description": "The description of the tag."
					},
					"entityTypes": {
						"items": {
							"$ref": "#/components/schemas/EntityType"
						},
						"type": "array",
						"description": "The entity types of the tag."
					},
					"archived": {
						"type": "boolean",
						"description": "The boolean flag to archive/unarchive a tag."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedQuery": {
				"description": "Defines the query parameters for paginated API requests.",
				"properties": {
					"limit": {
						"type": "number",
						"format": "double"
					},
					"offset": {
						"type": "number",
						"format": "double"
					},
					"q": {
						"type": "string"
					}
				},
				"required": [
					"limit",
					"offset"
				],
				"type": "object",
				"additionalProperties": false
			},
			"SharedStepItem": {
				"description": "Represents a shared step item within a test case.",
				"properties": {
					"id": {
						"type": "string",
						"description": "The unique identifier for the shared step item."
					},
					"title": {
						"type": "string",
						"description": "The title of the shared step item.\nOptional field that describes the name or label of the shared step."
					},
					"description": {
						"type": "string",
						"description": "The description of the shared step item.\nOptional field that provides additional details about the shared step."
					},
					"expectedResult": {
						"type": "string",
						"description": "The expected result for the shared step item.\nOptional field that outlines what the expected outcome of the shared step should be."
					},
					"children": {
						"items": {
							"$ref": "#/components/schemas/SharedStepItem"
						},
						"type": "array",
						"description": "A list of child shared step items.\nThis allows nested shared steps to be defined. Each child is a `SharedStepItem`.\nOptional field that can be used to structure complex shared steps."
					},
					"sharedStepUid": {
						"type": "number",
						"format": "double",
						"description": "The unique identifier for the shared step associated with this item.\nOptional field to link this item to a specific shared step."
					}
				},
				"required": [
					"id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateSharedStepDto": {
				"description": "Data Transfer Object for creating a new shared step.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the shared step.\nThis field defines the name or label for the shared step."
					},
					"steps": {
						"items": {
							"$ref": "#/components/schemas/SharedStepItem"
						},
						"type": "array",
						"description": "The list of steps for the shared step.\nThis is an array of `SharedStepItem` objects that define the individual steps\nwithin the shared step. Each item can contain a title, description, expected result,\nand optional child steps."
					}
				},
				"required": [
					"name",
					"steps"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateSharedStepDto": {
				"description": "Data Transfer Object for updating an existing shared step.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the shared step.\nOptional field that allows you to update the name or label of the shared step."
					},
					"steps": {
						"items": {
							"$ref": "#/components/schemas/SharedStepItem"
						},
						"type": "array",
						"description": "The list of steps for the shared step.\nOptional field that allows you to update the steps within the shared step.\nIt is an array of `SharedStepItem` objects, where each item represents a step,\nincluding its title, description, expected result, and optional child steps."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Record_number.number_": {
				"properties": {},
				"additionalProperties": {
					"type": "number",
					"format": "double"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"StatusFreq": {
				"$ref": "#/components/schemas/Record_number.number_"
			},
			"CustomFields": {
				"properties": {
					"configs": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"selectedCases": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array"
					},
					"caseCount": {
						"type": "number",
						"format": "double"
					},
					"progress": {
						"type": "number",
						"format": "double"
					},
					"frequency": {
						"$ref": "#/components/schemas/StatusFreq"
					},
					"externalFields": {}
				},
				"required": [
					"configs",
					"tags",
					"selectedCases"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateTestRunDto": {
				"description": "Data Transfer Object for creating a new test run.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the test run.\nThis field defines the name or label of the test run."
					},
					"cases": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The list of test case IDs to be included in the test run.\nOptional field that contains an array of test case IDs that should be executed in the test run."
					},
					"externalId": {
						"type": "string",
						"description": "The external identifier for the test run.\nThis field provides an external reference or ID for the test run, useful for integration with other systems."
					},
					"source": {
						"type": "string",
						"description": "The source of the test run.\nOptional field to specify where the test run originated, such as a specific tool, platform, or system."
					},
					"customFields": {
						"$ref": "#/components/schemas/CustomFields",
						"description": "Custom fields associated with the test run.\nOptional field that allows the inclusion of additional custom fields to provide more context or metadata for the test run."
					},
					"priority": {
						"type": "number",
						"format": "double",
						"description": "The priority level of the test run.\nOptional field that defines the priority for this test run, typically represented as a numeric value (e.g., 1 = high, 2 = medium, 3 = low)."
					},
					"status": {
						"type": "number",
						"format": "double",
						"description": "The status of the test run.\nOptional field that represents the current status of the test run, such as pending, running, completed, etc."
					},
					"milestoneUids": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The milestone UIDs associated with the test run.\nOptional field that links the test run to one or more milestones, allowing the test run to be associated with a specific point in a project or product timeline."
					}
				},
				"required": [
					"name",
					"externalId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateTestRunDto": {
				"description": "Data Transfer Object for updating an existing test run.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the test run.\nOptional field to update the name or label of the test run."
					},
					"cases": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The list of test case IDs to be included in the test run.\nOptional field that contains an array of test case IDs to be executed as part of the updated test run."
					},
					"externalId": {
						"type": "string",
						"description": "The external identifier for the test run.\nOptional field to update the external reference or ID for the test run, used for integration with external systems."
					},
					"source": {
						"type": "string",
						"description": "The source of the test run.\nOptional field to specify the source or origin of the test run, such as the tool or platform."
					},
					"customFields": {
						"$ref": "#/components/schemas/CustomFields",
						"description": "Custom fields associated with the test run.\nOptional field to update custom fields that provide additional context or metadata for the test run."
					},
					"priority": {
						"type": "number",
						"format": "double",
						"description": "The priority level of the test run.\nOptional field to update the priority of the test run, typically represented as a numeric value (e.g., 1 = high, 2 = medium, 3 = low)."
					},
					"status": {
						"type": "number",
						"format": "double",
						"description": "The status of the test run.\nOptional field to update the current status of the test run, such as pending, running, completed, or failed."
					},
					"milestoneUids": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The milestone UIDs associated with the test run.\nOptional field to update the milestone(s) to which the test run is linked, useful for project tracking."
					},
					"archived": {
						"type": "boolean",
						"description": "Whether the test run is archived.\nOptional field to mark the test run as archived or not. This can be used to indicate that the test run is no longer active or relevant."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ListPlanQueryParams": {
				"description": "Data Transfer Object for listing paginated plans.",
				"properties": {
					"limit": {
						"type": "number",
						"format": "double"
					},
					"offset": {
						"type": "number",
						"format": "double"
					},
					"q": {
						"type": "string"
					},
					"status": {
						"type": "number",
						"format": "double"
					},
					"priority": {
						"type": "number",
						"format": "double"
					},
					"archived": {
						"type": "boolean"
					},
					"minRunCount": {
						"type": "number",
						"format": "double"
					},
					"maxRunCount": {
						"type": "number",
						"format": "double"
					},
					"minCreatedAt": {
						"type": "string"
					},
					"maxCreatedAt": {
						"type": "string"
					},
					"minProgress": {
						"type": "number",
						"format": "double"
					},
					"maxProgress": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"limit",
					"offset",
					"archived",
					"minRunCount",
					"minCreatedAt",
					"minProgress"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ConfigurationDTO": {
				"properties": {
					"sets": {
						"items": {
							"items": {
								"type": "string"
							},
							"type": "array"
						},
						"type": "array",
						"description": "a configuration set is a list of configuration options prefixed by their id"
					},
					"type": {
						"type": "string",
						"enum": [
							"simple",
							"matrix"
						]
					}
				},
				"required": [
					"sets",
					"type"
				],
				"type": "object",
				"example": {
					"type": "matrix",
					"sets": [
						[
							"browser:firefox",
							"browser:safari"
						],
						[
							"os:windows",
							"os:mac"
						]
					]
				},
				"description": "Defines the structure of the configuration for a plan."
			},
			"Record_string.string_": {
				"properties": {},
				"additionalProperties": {
					"type": "string"
				},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"CreatePlanDTO": {
				"description": "Data Transfer Object for creating a new plan.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the plan.\nThis field defines the name or title of the plan."
					},
					"description": {
						"type": "string",
						"description": "A brief description of the plan.\nOptional field that provides additional context or information about the plan."
					},
					"milestoneUids": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The milestone UIDs associated with the plan.\nOptional field that links the plan to one or more milestones. Milestones represent significant points in the project or timeline."
					},
					"status": {
						"type": "number",
						"format": "double",
						"description": "The status of the plan.\nOptional field that defines the current state of the plan, such as pending, active, or completed, usually represented as a numeric value."
					},
					"priority": {
						"type": "number",
						"format": "double",
						"description": "The priority level of the plan.\nOptional field that represents the priority of the plan, typically represented as a numeric value (e.g., 1 = high, 2 = medium, 3 = low)."
					},
					"customFields": {
						"$ref": "#/components/schemas/Record_string.string_",
						"description": "Custom fields associated with the plan.\nOptional field that allows the addition of key-value pairs to capture additional metadata or context for the plan."
					},
					"externalId": {
						"type": "string",
						"description": "The external identifier for the plan.\nOptional field to reference the plan externally, useful for integration with other systems or tools."
					},
					"source": {
						"type": "string",
						"description": "The source of the plan.\nOptional field that provides information about the origin of the plan, such as the tool or platform from which it was created."
					},
					"projectUid": {
						"type": "number",
						"format": "double",
						"description": "The project UID associated with the plan.\nThis field identifies the project to which the plan belongs. It is a required field as each plan is tied to a specific project."
					},
					"testRuns": {
						"items": {
							"properties": {
								"configuration": {
									"$ref": "#/components/schemas/ConfigurationDTO"
								},
								"uid": {
									"type": "number",
									"format": "double"
								}
							},
							"required": [
								"configuration",
								"uid"
							],
							"type": "object"
						},
						"type": "array",
						"description": "The test runs associated with the plan.\nOptional field that contains the test runs to be included in the plan, each with its UID and configuration details."
					},
					"configuration": {
						"$ref": "#/components/schemas/ConfigurationDTO",
						"description": "The configuration details for the plan.\nThis is a required field that specifies the configuration for the plan, such as the type of configuration and the sets of options it includes."
					},
					"tagUids": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The tag UIDs associated with the plan.\nOptional field to specify the tags linked to the plan. Tags help categorize or label the plan for better organization and filtering."
					}
				},
				"required": [
					"name",
					"projectUid",
					"configuration"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdatePlanDTO": {
				"description": "Data Transfer Object for updating an existing plan.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the plan.\nOptional field to update the name or title of the plan."
					},
					"description": {
						"type": "string",
						"description": "A brief description of the plan.\nOptional field to update the description, providing additional context or details about the plan."
					},
					"tagUids": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The tag UIDs associated with the plan.\nOptional field to update the tags linked to the plan. Tags help categorize or label the plan for easier organization."
					},
					"milestoneUids": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The milestone UIDs associated with the plan.\nOptional field to update the milestones linked to the plan. Milestones represent key points in the project or timeline."
					},
					"runUids": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The run UIDs associated with the plan.\nOptional field to update the test runs included in the plan. These are the specific runs that are part of the plan's execution."
					},
					"status": {
						"type": "number",
						"format": "double",
						"description": "The status of the plan.\nOptional field to update the current state of the plan, such as pending, active, or completed, typically represented by a numeric value."
					},
					"priority": {
						"type": "number",
						"format": "double",
						"description": "The priority level of the plan.\nOptional field to update the priority of the plan, generally represented as a numeric value (e.g., 1 = high, 2 = medium, 3 = low)."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CreateMilestoneDTO": {
				"description": "Data Transfer Object for creating a new milestone.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the milestone.\nA string representing the title or label of the milestone."
					},
					"description": {
						"type": "string",
						"description": "The description of the milestone.\nOptional field that provides additional details or context about the milestone."
					},
					"startDate": {
						"type": "string",
						"description": "The start date of the milestone.\nA string in ISO 8601 format representing the start date of the milestone (e.g., \"2025-03-01T00:00:00Z\")."
					},
					"dueAt": {
						"type": "string",
						"description": "The due date of the milestone.\nA string in ISO 8601 format representing the due date or deadline for the milestone (e.g., \"2025-04-01T00:00:00Z\")."
					},
					"status": {
						"type": "number",
						"format": "double",
						"description": "The status of the milestone.\nA number representing the current status of the milestone (e.g., 1 for \"In Progress\", 2 for \"Completed\")."
					},
					"planIds": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The IDs of the plans associated with the milestone.\nAn array of numbers representing the IDs of the plans linked to the milestone."
					},
					"runIds": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The IDs of the runs associated with the milestone.\nAn array of numbers representing the IDs of the test runs linked to the milestone."
					},
					"projectUid": {
						"type": "number",
						"format": "double",
						"description": "The project UID to which the milestone belongs.\nA number representing the unique identifier for the project the milestone is part of."
					},
					"tagUids": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The tag UIDs associated with the milestone.\nOptional field to specify an array of tag IDs for categorizing or labeling the milestone."
					}
				},
				"required": [
					"name",
					"startDate",
					"dueAt",
					"status",
					"planIds",
					"runIds",
					"projectUid"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateMilestoneDTO": {
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the milestone.\nA string representing the title or label of the milestone."
					},
					"description": {
						"type": "string",
						"description": "The description of the milestone.\nOptional field that provides additional details or context about the milestone."
					},
					"startDate": {
						"type": "string",
						"description": "The start date of the milestone.\nA string in ISO 8601 format representing the start date of the milestone (e.g., \"2025-03-01T00:00:00Z\")."
					},
					"dueAt": {
						"type": "string",
						"description": "The due date of the milestone.\nA string in ISO 8601 format representing the due date or deadline for the milestone (e.g., \"2025-04-01T00:00:00Z\")."
					},
					"status": {
						"type": "number",
						"format": "double",
						"description": "The status of the milestone.\nA number representing the current status of the milestone (e.g., 1 for \"In Progress\", 2 for \"Completed\")."
					},
					"planIds": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The IDs of the plans associated with the milestone.\nAn array of numbers representing the IDs of the plans linked to the milestone."
					},
					"runIds": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The IDs of the runs associated with the milestone.\nAn array of numbers representing the IDs of the test runs linked to the milestone."
					},
					"projectUid": {
						"type": "number",
						"format": "double",
						"description": "The project UID to which the milestone belongs.\nA number representing the unique identifier for the project the milestone is part of."
					},
					"tagUids": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The tag UIDs associated with the milestone.\nOptional field to specify an array of tag IDs for categorizing or labeling the milestone."
					},
					"archived": {
						"type": "boolean"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.any_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"CreateFolderDto": {
				"description": "Data Transfer Object for creating a new folder.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the folder.\nA string representing the title or label of the folder."
					},
					"externalId": {
						"type": "string",
						"description": "The external ID of the folder.\nOptional field to associate the folder with an external identifier, such as from another system or service."
					},
					"source": {
						"type": "string",
						"description": "The source of the folder.\nOptional field to specify the origin or source system of the folder (e.g., \"manual\", \"imported\")."
					},
					"customFields": {
						"$ref": "#/components/schemas/Record_string.any_",
						"description": "The custom fields associated with the folder.\nOptional field that allows additional metadata or custom attributes to be stored in the folder."
					},
					"parentId": {
						"type": "number",
						"format": "double",
						"description": "The parent ID of the folder.\nA number representing the unique identifier of the parent folder. Used for nesting folders."
					},
					"status": {
						"type": "number",
						"format": "double",
						"description": "The status of the folder.\nOptional field that represents the current status of the folder (e.g., 1 for \"Active\", 2 for \"Archived\")."
					}
				},
				"required": [
					"name",
					"parentId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateFolderDto": {
				"description": "Data Transfer Object for updating an existing folder.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the folder.\nOptional field to update the title or label of the folder."
					},
					"externalId": {
						"type": "string",
						"description": "The external ID of the folder.\nOptional field to update the external identifier of the folder."
					},
					"source": {
						"type": "string",
						"description": "The source of the folder.\nOptional field to update the source or origin of the folder."
					},
					"customFields": {
						"$ref": "#/components/schemas/Record_string.any_",
						"description": "The custom fields associated with the folder.\nOptional field to update or add additional metadata or custom attributes to the folder."
					},
					"parentId": {
						"type": "number",
						"format": "double",
						"description": "The parent ID of the folder.\nOptional field to update the unique identifier of the parent folder, allowing for reorganization of folders."
					},
					"status": {
						"type": "number",
						"format": "double",
						"description": "The status of the folder.\nOptional field to update the current status of the folder."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ExecutionStep": {
				"description": "Represents a step within an execution.",
				"properties": {
					"testStepUid": {
						"type": "string",
						"description": "The unique identifier for the test step.\nRequired field to specify the UID of the test step."
					},
					"description": {
						"type": "string",
						"description": "The description of the test step.\nRequired field to describe the test step's action or purpose."
					},
					"customFields": {
						"$ref": "#/components/schemas/Record_string.any_",
						"description": "The custom fields for the test step.\nRequired field to store custom information for the test step in a key-value format."
					}
				},
				"required": [
					"testStepUid",
					"description",
					"customFields"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateExecutionDTO": {
				"description": "Data Transfer Object for creating a new execution.",
				"properties": {
					"externalId": {
						"type": "string",
						"description": "The external identifier for the execution.\nOptional field to specify an external ID for the execution."
					},
					"source": {
						"type": "string",
						"description": "The source of the execution.\nOptional field to specify the source of the execution (e.g., \"manual\", \"automated\")."
					},
					"testCaseUid": {
						"type": "number",
						"format": "double",
						"description": "The unique identifier of the associated test case.\nOptional field to link the execution to a specific test case."
					},
					"testCaseRef": {
						"type": "number",
						"format": "double",
						"description": "The reference number for the associated test case.\nOptional field to provide an reference number for the test case."
					},
					"testRunUid": {
						"type": "number",
						"format": "double",
						"description": "The unique identifier of the associated test run.\nOptional field to link the execution to a specific test run."
					},
					"status": {
						"type": "number",
						"format": "double",
						"description": "The status of the execution.\nOptional field to specify the status of the execution (e.g., \"not started\", \"in progress\", \"completed\")."
					},
					"customFields": {
						"$ref": "#/components/schemas/Record_string.any_",
						"description": "The custom fields for the execution.\nRequired field to store custom information for the execution in a key-value format."
					},
					"steps": {
						"items": {
							"$ref": "#/components/schemas/ExecutionStep"
						},
						"type": "array",
						"description": "The steps associated with the execution.\nOptional field to include the steps involved in the execution."
					}
				},
				"required": [
					"customFields"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateExecutionDTO": {
				"description": "Data Transfer Object for updating an existing execution.",
				"properties": {
					"status": {
						"type": "number",
						"format": "double",
						"description": "The status of the execution.\nOptional field to specify the status of the execution."
					},
					"priority": {
						"type": "number",
						"format": "double",
						"description": "The priority of the execution.\nOptional field to set the priority level of the execution (e.g., high, medium, low)."
					},
					"dueAt": {
						"type": "string",
						"format": "date-time",
						"description": "The due date of the execution.\nOptional field to set the due date for the execution in ISO 8601 format (e.g., \"2025-03-10T12:00:00\")."
					},
					"assignedTo": {
						"type": "string",
						"description": "The user assigned to the execution.\nOptional field to specify the user responsible for the execution."
					},
					"tagUids": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The tag UIDs associated with the execution.\nOptional field to associate tags with the execution, represented by their unique identifiers."
					},
					"tagReplacements": {
						"items": {
							"properties": {
								"newTagUids": {
									"items": {
										"type": "number",
										"format": "double"
									},
									"type": "array"
								},
								"existingTagUids": {
									"items": {
										"type": "number",
										"format": "double"
									},
									"type": "array"
								}
							},
							"type": "object"
						},
						"type": "array",
						"description": "The tag replacements for the execution.\nOptional field to replace existing tags with new ones.\n`existingTagUids` is an array of existing tags to be replaced, and `newTagUids` is an array of the new tags."
					},
					"name": {
						"type": "string",
						"description": "The name of the execution.\nOptional field to update the name or title of the execution."
					},
					"steps": {
						"items": {},
						"type": "array",
						"description": "The steps associated with the execution.\nOptional field to update or add new steps for the execution."
					},
					"templateFields": {
						"description": "The template fields for the execution.\nRequired field to update or specify template fields associated with the execution."
					}
				},
				"required": [
					"templateFields"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FolderData": {
				"properties": {
					"name": {
						"type": "string"
					},
					"externalIdField": {
						"type": "string"
					},
					"source": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"externalIdField",
					"source"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"RunData": {
				"properties": {
					"name": {
						"type": "string"
					},
					"externalIdField": {
						"type": "string"
					},
					"source": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"externalIdField",
					"source"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"ExecutionData": {
				"properties": {
					"name": {
						"type": "string"
					},
					"externalIdField": {
						"type": "string"
					},
					"caseRef": {
						"type": "string"
					},
					"runRef": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"externalIdField",
					"caseRef",
					"runRef"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"CreateDataDto": {
				"properties": {
					"entities": {
						"properties": {
							"executions": {
								"properties": {
									"entries": {
										"items": {
											"$ref": "#/components/schemas/ExecutionData"
										},
										"type": "array"
									}
								},
								"required": [
									"entries"
								],
								"type": "object"
							},
							"runs": {
								"properties": {
									"entries": {
										"items": {
											"$ref": "#/components/schemas/RunData"
										},
										"type": "array"
									}
								},
								"required": [
									"entries"
								],
								"type": "object"
							},
							"folders": {
								"properties": {
									"entries": {
										"items": {
											"$ref": "#/components/schemas/FolderData"
										},
										"type": "array"
									}
								},
								"required": [
									"entries"
								],
								"type": "object"
							}
						},
						"required": [
							"executions",
							"runs",
							"folders"
						],
						"type": "object"
					}
				},
				"required": [
					"entities"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CustomFieldTypes": {
				"type": "string",
				"enum": [
					"text",
					"radio",
					"date",
					"step",
					"link",
					"checkbox",
					"dropdown",
					"multi",
					"file"
				]
			},
			"CreateCustomFieldDto": {
				"description": "Data Transfer Object for creating a new custom field.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the custom field.\nA string representing the title or label of the custom field."
					},
					"type": {
						"$ref": "#/components/schemas/CustomFieldTypes",
						"description": "The type of the custom field.\nOptional field to specify the data type of the custom field (e.g., text, number, date).\nDefaults to `undefined` if not provided."
					},
					"source": {
						"type": "string",
						"description": "The source of the custom field.\nOptional field to specify the origin or source of the custom field (e.g., \"manual\", \"imported\")."
					},
					"options": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The options for the custom field.\nOptional field to define the available choices for the custom field, applicable for certain types like dropdowns or radio buttons.\nShould be an array of strings representing the options."
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateCustomFieldDto": {
				"description": "Data Transfer Object for updating an existing custom field.",
				"properties": {
					"name": {
						"type": "string",
						"description": "The name of the custom field.\nOptional field to update the title or label of the custom field."
					},
					"type": {
						"$ref": "#/components/schemas/CustomFieldTypes",
						"description": "The type of the custom field.\nOptional field to update the data type of the custom field (e.g., text, number, date)."
					},
					"source": {
						"type": "string",
						"description": "The source of the custom field.\nOptional field to update the source or origin of the custom field."
					},
					"options": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The options for the custom field.\nOptional field to update or add new options for the custom field.\nShould be an array of strings representing the updated options."
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CaseQueryParams": {
				"properties": {
					"limit": {
						"type": "number",
						"format": "double"
					},
					"offset": {
						"type": "number",
						"format": "double"
					},
					"q": {
						"type": "string"
					},
					"priority": {
						"type": "string"
					},
					"tag": {
						"type": "string"
					}
				},
				"required": [
					"limit",
					"offset"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateCaseDTO": {
				"description": "Data Transfer Object for creating a new case.",
				"properties": {
					"customFields": {
						"description": "Custom fields associated with the case.\nThis is an object that contains custom fields relevant to the case. The structure can vary depending on the specific custom fields for the case."
					},
					"source": {
						"type": "string",
						"description": "The source from which the case originates.\nA string that represents the origin or the system from which the case is being created."
					},
					"name": {
						"type": "string",
						"description": "The name of the case.\nA string that provides the title or label for the case."
					},
					"priority": {
						"type": "number",
						"format": "double",
						"description": "The priority of the case.\nOptional field to define the importance or urgency of the case. It can be represented numerically (e.g., 1 = high priority)."
					},
					"repoUID": {
						"type": "string",
						"description": "The repository UID where the case is located.\nA string that uniquely identifies the repository to which the case belongs."
					},
					"parentId": {
						"type": "number",
						"format": "double",
						"description": "The parent case ID.\nA number that represents the ID of the parent case, allowing the case to be part of a hierarchy or grouping."
					},
					"steps": {
						"items": {},
						"type": "array",
						"description": "The steps associated with the case.\nAn array of steps that describe the process, actions, or workflow related to the case."
					},
					"externalId": {
						"type": "string",
						"description": "The external ID of the case.\nA string that represents an external identifier, often used to correlate or link the case with external systems or databases."
					},
					"projectId": {
						"type": "string",
						"description": "The project ID to which the case belongs.\nA string that identifies the project that the case is part of."
					},
					"templateId": {
						"type": "string",
						"description": "The template ID associated with the case.\nOptional field to specify a template to be applied to the case. It links the case to a predefined template for consistency in its structure."
					},
					"tagIds": {
						"items": {
							"type": "number",
							"format": "double"
						},
						"type": "array",
						"description": "The tag IDs associated with the case.\nOptional field that includes an array of tag IDs to categorize or label the case for better filtering or grouping."
					}
				},
				"required": [
					"customFields",
					"source",
					"name",
					"repoUID",
					"parentId",
					"steps",
					"externalId",
					"projectId"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "testfiesta-backend",
		"version": "0.41.8",
		"license": {
			"name": "Closed"
		},
		"contact": {
			"name": "TestFiesta, Inc"
		}
	},
	"paths": {
		"/v1/{handle}/projects/{key}/templates": {
			"get": {
				"operationId": "GetTemplates",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves the list of paginated templates for a particular project of a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "q",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "createdByIds",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"in": "query",
						"name": "creationStartDate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "creationEndDate",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateTemplate",
				"responses": {
					"200": {
						"description": "The newly created template object.",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Creates a new template within a project for a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for a user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The template data to be created.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTemplateDto",
								"description": "The template data to be created."
							}
						}
					}
				}
			}
		},
		"/v1/{handle}/projects/{key}/templates/{id}": {
			"get": {
				"operationId": "GetTemplate",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves the details of a specific template within a project for a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for a user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for the template.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"patch": {
				"operationId": "UpdateTemplate",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateTemplateDto"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteTemplate",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": [
										"message"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/{handle}/tags": {
			"get": {
				"operationId": "GetTags",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves the list of paginated tags of a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "q",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "entityType",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateTag",
				"responses": {
					"200": {
						"description": "The newly created tag object.",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Creates a new tag for a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for a user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The tag data to be created.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTagDto",
								"description": "The tag data to be created."
							}
						}
					}
				}
			}
		},
		"/v1/{handle}/tags/{id}": {
			"get": {
				"operationId": "GetTag",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves the details of a specific tag for a user or an organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for a user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for the tag.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"patch": {
				"operationId": "UpdateTag",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateTagDto"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteTag",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/v1/{handle}/projects/{key}/shared-steps": {
			"get": {
				"operationId": "GetSharedSteps",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves the list of paginated shared steps for a particular project of a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "q",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateSharedStep",
				"responses": {
					"200": {
						"description": "The newly created shared step object.",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Creates a new shared step within a project for a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for a user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The shared step data to be created.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateSharedStepDto",
								"description": "The shared step data to be created."
							}
						}
					}
				}
			}
		},
		"/v1/{handle}/projects/{key}/shared-steps/{id}": {
			"patch": {
				"operationId": "UpdateSharedStep",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateSharedStepDto"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteSharedStep",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/v1/{handle}/projects/{key}/runs": {
			"get": {
				"operationId": "GetTestRuns",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves the list of paginated test runs for a particular project of a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "q",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateTestRun",
				"responses": {
					"200": {
						"description": "The newly created test run object.",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Creates a new test run within a project for a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for a user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The template data to be created.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTestRunDto",
								"description": "The template data to be created."
							}
						}
					}
				}
			}
		},
		"/v1/{handle}/projects/{key}/runs/{id}": {
			"get": {
				"operationId": "GetTestRun",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves the details of a specific test run within a project for a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for a user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for the test run.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"patch": {
				"operationId": "UpdateTestRun",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateTestRunDto"
							}
						}
					}
				}
			}
		},
		"/v1/{handle}/projects/{key}/plans": {
			"get": {
				"operationId": "GetPlans",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves the list of paginated test plans for a particular project of a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "q",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "priority",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "archived",
						"required": true,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "minRunCount",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "maxRunCount",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "minCreatedAt",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "maxCreatedAt",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "minProgress",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "maxProgress",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "CreatePlan",
				"responses": {
					"200": {
						"description": "The newly created plan object.",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Creates a new test plan within a project for a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for a user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The plan data to be created.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreatePlanDTO",
								"description": "The plan data to be created."
							}
						}
					}
				}
			}
		},
		"/v1/{handle}/projects/{key}/plans/{id}": {
			"get": {
				"operationId": "GetPlan",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves the details of a specific test plan within a project for a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for a user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for the test plan.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"patch": {
				"operationId": "UpdatePlan",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdatePlanDTO"
							}
						}
					}
				}
			}
		},
		"/v1/{handle}/projects/{key}/milestones": {
			"get": {
				"operationId": "GetMilestones",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves the list of paginated milstones for a particular project of a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "q",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateMilestone",
				"responses": {
					"200": {
						"description": "The newly created test milestone object.",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Creates a new test milestone within a project for a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for a user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The test milestone data to be created.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateMilestoneDTO",
								"description": "The test milestone data to be created."
							}
						}
					}
				}
			}
		},
		"/v1/{handle}/projects/{key}/milestones/{id}": {
			"patch": {
				"operationId": "UpdateMilestone",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateMilestoneDTO"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteMilestone",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/v1/{handle}/projects/{key}/folders": {
			"get": {
				"operationId": "GetFolders",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves the list of paginated folders for a particular project of a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for user or an organization",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "q",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateFolder",
				"responses": {
					"200": {
						"description": "The newly created folder object.",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Creates a new folder within a project for a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for a user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The folder data to be created.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateFolderDto",
								"description": "The folder data to be created."
							}
						}
					}
				}
			}
		},
		"/v1/{handle}/projects/{key}/folders/{id}": {
			"get": {
				"operationId": "GetFolder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves the details of a specific folder within a project for a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for a user or an organization",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for the folder",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"patch": {
				"operationId": "UpdateFolder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateFolderDto"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteFolder",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/v1/{handle}/projects/{key}/executions": {
			"get": {
				"operationId": "GetExecutions",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves the list of paginated executions for a particular project of a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for user or an organization",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "q",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateExecution",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"description": "Creates a new test execution within a project for a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for a user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The execution data to be created.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateExecutionDTO",
								"description": "The execution data to be created."
							}
						}
					}
				}
			}
		},
		"/v1/{handle}/projects/{key}/executions/{id}": {
			"get": {
				"operationId": "GetExecution",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves the details of a specific test execution within a project for a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for a user or an organization",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for the test execution",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"patch": {
				"operationId": "UpdateExecution",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateExecutionDTO"
							}
						}
					}
				}
			}
		},
		"/v1/{handle}/projects/{key}/data": {
			"post": {
				"operationId": "NewData",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateDataDto"
							}
						}
					}
				}
			}
		},
		"/v1/{handle}/projects/{key}/customFields": {
			"get": {
				"operationId": "GetCustomFields",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves the list of paginated custom fields for a particular project of a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "q",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateCustomField",
				"responses": {
					"200": {
						"description": "The newly created custom field object.",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Creates a new custom field within a project for a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for a user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The custom field data to be created.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateCustomFieldDto",
								"description": "The custom field data to be created."
							}
						}
					}
				}
			}
		},
		"/v1/{handle}/projects/{key}/customFields/{id}": {
			"patch": {
				"operationId": "UpdateCustomField",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateCustomFieldDto"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteCustomField",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/v1/{handle}/projects/{key}/cases": {
			"get": {
				"operationId": "GetCases",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves the list of paginated cases for a particular project of a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "offset",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "q",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "priority",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tag",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateCase",
				"responses": {
					"200": {
						"description": "The newly created test case object.",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Creates a new test case within a project for a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for a user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The test case data to be created.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateCaseDTO",
								"description": "The test case data to be created."
							}
						}
					}
				}
			}
		},
		"/v1/{handle}/projects/{key}/cases/{id}": {
			"get": {
				"operationId": "GetCase",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves the details of a specific test case within a project for a user or organization.",
				"security": [],
				"parameters": [
					{
						"description": "The unique identifier for a user or an organization.",
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for a project.",
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The unique identifier for the test case.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteCase",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "handle",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "key",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		}
	},
	"servers": [
		{
			"url": "https://api.testfiesta.com"
		}
	]
}
